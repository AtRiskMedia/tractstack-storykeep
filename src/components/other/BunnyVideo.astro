---
export interface Props {
  videoUrl: string;
  title: string;
}
const { videoUrl, title } = Astro.props;
---

<astro-bunny-video data-src={videoUrl} data-title={title}>
  <div class="w-full">
    <div id="video-container"></div>
  </div>
</astro-bunny-video>
<script>
  class AstroBunnyVideo extends HTMLElement {
    private currentIframe: HTMLIFrameElement | null = null;
    private videoContainer: HTMLElement | null = null;
    private videoUrl: string;
    private videoTitle: string;

    constructor() {
      super();
      this.videoUrl = this.dataset.src || "";
      this.videoTitle = this.dataset.title || "";

      this.embedVideo(this.getStartTime() || "");

      document.addEventListener("astro:page-load", this.handlePageLoad);
      document.addEventListener(
        "updateVideo",
        this.handleUpdateVideo as EventListener
      );
    }

    private getStartTime = (): string | null => {
      const urlParams = new URLSearchParams(window.location.search);
      return urlParams.get("t");
    };

    private adjustIframeHeight = (iframe: HTMLIFrameElement): void => {
      const width = iframe.offsetWidth;
      const height = width * (9 / 16);
      iframe.style.height = `${height}px`;
    };

    private embedVideo = (t: string): void => {
      const regex = /^(\d+)s$/;
      const match = t?.match(regex);
      const startTime = match && match[1] && parseInt(match[1]);

      if (!this.videoContainer) {
        this.videoContainer = this.querySelector("#video-container");
      }

      if (this.currentIframe && this.videoContainer) {
        this.videoContainer.removeChild(this.currentIframe);
        this.currentIframe = null;
      }

      const iframe = document.createElement("iframe");
      iframe.src = `${this.videoUrl}?autoplay=${typeof startTime === "number" ? 1 : 0}&loop=false&muted=false&preload=${typeof startTime === "number"}&responsive=true&t=${startTime || 0}`;
      iframe.width = "100%";
      iframe.style.aspectRatio = "16 / 9";
      iframe.allowFullscreen = true;
      iframe.title = this.videoTitle || `Video Embed`;
      iframe.setAttribute("playsinline", "");
      iframe.setAttribute("allow", "autoplay; fullscreen");

      if (this.videoContainer) {
        this.videoContainer.appendChild(iframe);
        this.currentIframe = iframe;
        this.adjustIframeHeight(iframe);

        if (typeof startTime === "number") {
          setTimeout(() => {
            iframe.scrollIntoView({ behavior: "smooth", block: "center" });
          }, 1000);
        }
      }

      window.addEventListener("resize", () => this.adjustIframeHeight(iframe));
    };

    private handleUpdateVideo = (event: CustomEvent): void => {
      const { startTime } = event.detail;
      this.embedVideo(startTime);
    };

    private handlePageLoad = (): void => {
      this.embedVideo(this.getStartTime() || "");
    };

    disconnectedCallback(): void {
      document.removeEventListener("astro:page-load", this.handlePageLoad);
      document.removeEventListener(
        "updateVideo",
        this.handleUpdateVideo as EventListener
      );
    }
  }

  customElements.define("astro-bunny-video", AstroBunnyVideo);
</script>

---
import { LOCALE, SITE } from "@config";
import { ViewTransitions } from "astro:transitions";
import SetContentMap from "../components/SetContentMap";
import { getContentMap } from "../api/turso";
import type { ContentMap } from "../types";

export interface Props {
  canonicalURL: string;
  title?: string;
  author?: string;
  description?: string;
  ogImage?: string | null;
  ogLogo?: string;
  website?: string;
  pubDatetime?: Date;
  modDatetime?: Date | null;
  scrollSmooth?: boolean;
}

const {
  title = SITE.title,
  author = SITE.author,
  description = SITE.desc,
  ogImage = SITE.ogImage,
  ogLogo = SITE.ogLogo,
  website = SITE.website,
  canonicalURL,
  pubDatetime,
  modDatetime,
  scrollSmooth = true,
} = Astro.props;

const useCustomFontsEnv = import.meta.env.PUBLIC_USE_CUSTOM_FONTS;
const useCustomFonts = useCustomFontsEnv ? useCustomFontsEnv === "true" : false;

const socialImageURL = `${website}/${ogImage ?? SITE.ogImage ?? `og.png`}`;
const socialLogoURL = `${website}/${ogLogo ?? SITE.ogLogo ?? `logo.png`}`;
//const storykeepCss = `${import.meta.env.PUBLIC_CONCIERGE_STYLES_URL}/storykeep.css`;
const storykeepCss = `/styles/storykeep.css`;
const contentMap: ContentMap[] = await getContentMap();
---

<!doctype html>
<html
  lang=`${LOCALE.lang ?? "en"}`
  class={`${scrollSmooth && "motion-safe:scroll-smooth"}`}
>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="canonical" href={canonicalURL} />
    <meta name="generator" content={Astro.generator} />

    <!-- Custom styles -->
    <link rel="stylesheet" href="/styles/custom.css" />
    <link rel="stylesheet" href={storykeepCss} />

    <!-- General Meta Tags -->
    <title>{title}</title>
    <meta name="title" content={title} />
    <meta name="description" content={description} />
    <meta name="author" content={author} />
    <link rel="sitemap" href="/sitemap.xml" />

    <!-- Open Graph / Facebook -->
    <meta property="og:title" content={title} />
    <meta property="og:type" content="website" />
    <meta property="og:description" content={description} />
    <meta property="og:url" content={canonicalURL} />
    <meta property="og:image" content={socialImageURL} />
    <meta property="og:logo" content={socialLogoURL} />

    <!-- Article Published/Modified time -->
    {
      pubDatetime && (
        <>
          <meta
            property="article:published_time"
            content={pubDatetime.toISOString()}
          />
        </>
      )
    }
    {
      modDatetime && (
        <>
          <meta
            property="article:modified_time"
            content={modDatetime.toISOString()}
          />
        </>
      )
    }

    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={canonicalURL} />
    <meta property="twitter:title" content={title} />
    <meta property="twitter:description" content={description} />
    <meta property="twitter:image" content={socialImageURL} />

    {
      !useCustomFonts && (
        <>
          <link rel="preconnect" href="https://fonts.googleapis.com" />
          <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
          <link
            href="https://fonts.googleapis.com/css2?family=Inter:wght@100..900&display=swap"
            rel="stylesheet"
          />
        </>
      )
    }

    <!-- Tract Stack Concierge -->
    <script>
      import {
        startLoadingAnimation,
        stopLoadingAnimation,
        handleScroll,
        scrollToTop,
        debounce,
      } from "../utils/helpers";
      import { init } from "../utils/init";

      function setupEventHandlers() {
        // Set up animation event listeners
        document.addEventListener(
          "astro:before-preparation",
          startLoadingAnimation
        );
        document.addEventListener("astro:after-swap", stopLoadingAnimation);
      }

      // Initial setup
      setupEventHandlers();

      // controls scrollToTop button visibility
      const debouncedHandleScroll = debounce(handleScroll, 50);

      document.addEventListener("astro:page-load", () => {
        setupEventHandlers();
        handleScroll();
        init();
        scrollToTop();
        document.addEventListener("scroll", debouncedHandleScroll);
      });
    </script>

    <ViewTransitions />
  </head>
  <body>
    <div
      id="loading-indicator"
      class="fixed top-0 left-0 w-full h-1 bg-myorange transform scale-x-0 transition-transform duration-300 ease-out z-50"
    >
    </div>
    <SetContentMap payload={contentMap} client:load />
    <div id="content" class="transition-opacity duration-300">
      <slot />
    </div>
  </body>
</html>

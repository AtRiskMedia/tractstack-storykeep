---
// Any Astro-specific imports or frontmatter can go here
---

<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>StoryKeep</title>
    <link
      href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css"
      rel="stylesheet"
    />
  </head>
  <body class="m-0 p-0 flex flex-col bg-slate-50">
    <header
      class="z-10 bg-white shadow-md p-4 flex justify-between items-center"
      id="main-header"
    >
      <h1 class="text-2xl font-bold">StoryKeep</h1>
      <div class="flex space-x-2">
        <button
          class="viewport-button px-4 py-2 bg-gray-200 border border-gray-300 rounded-md hover:bg-gray-300 transition-colors"
          data-viewport="auto">Auto</button
        >
        <button
          class="viewport-button px-4 py-2 bg-gray-200 border border-gray-300 rounded-md hover:bg-gray-300 transition-colors"
          data-viewport="xs">XS</button
        >
        <button
          class="viewport-button px-4 py-2 bg-gray-200 border border-gray-300 rounded-md hover:bg-gray-300 transition-colors"
          data-viewport="md">MD</button
        >
        <button
          class="viewport-button px-4 py-2 bg-gray-200 border border-gray-300 rounded-md hover:bg-gray-300 transition-colors"
          data-viewport="xl">XL</button
        >
      </div>
    </header>

    <div class="flex-1 flex">
      <main class="website-content flex-1 overflow-y-auto p-4 bg-white">
        <h2 class="text-xl font-semibold mb-4">Website Content</h2>
        <p>lorem ipsum</p>
        <div
          class="editable-element mt-4 p-2 border border-gray-300 rounded-md cursor-pointer"
          data-element-id="1"
        >
          <p>This is an editable element. Click to edit.</p>
        </div>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <div
          class="editable-element mt-4 p-2 border border-gray-300 rounded-md cursor-pointer"
          data-element-id="2"
        >
          <p>This is an editable element. Click to edit.</p>
        </div>
        <p class="mt-4">lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <div
          class="editable-element mt-4 p-2 border border-gray-300 rounded-md cursor-pointer"
          data-element-id="3"
        >
          <p>This is an editable element. Click to edit.</p>
        </div>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
      </main>

      <aside
        class="edit-pane hidden w-0 transition-all duration-300 bg-gray-100 border-l border-gray-300 p-4 overflow-y-auto fixed right-0 top-0 bottom-0"
      >
        <h3 class="text-lg font-semibold mb-2">Edit Mode</h3>
        <p id="edit-info"></p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
      </aside>
    </div>

    <div
      class="edit-modal-mobile hidden fixed bg-white shadow-md z-5 transition-all duration-300 flex flex-col w-full"
    >
      <h3 class="text-lg font-semibold mb-2">Edit Mode (Mobile/Tablet)</h3>
      <div class="overflow-y-auto p-4 flex-grow">
        <p id="edit-info-mobile"></p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
      </div>
    </div>

    <script>
      document.addEventListener("DOMContentLoaded", () => {
        const mainContent = document.querySelector(".flex-1.flex");
        const websiteContent = document.querySelector(".website-content");
        const editPane = document.querySelector(".edit-pane");
        const editModalMobile = document.querySelector(".edit-modal-mobile");
        const viewportButtons = document.querySelectorAll(".viewport-button");
        const editableElements = document.querySelectorAll(".editable-element");
        const editInfo = document.getElementById("edit-info");
        const editInfoMobile = document.getElementById("edit-info-mobile");

        const BREAKPOINTS = {
          xs: 600,
          md: 800,
          xl: 1367,
        };
        const SHORT_SCREEN_THRESHOLD = 800;

        let currentViewport = "auto";
        let isEditMode = false;
        let activeElement = null;

        function closeEditMode() {
          if (isEditMode) {
            toggleEditMode(activeElement);
          }
        }

        function handleEditModeLayout() {
          const isDesktop = window.innerWidth >= BREAKPOINTS.xl;
          const isShortScreen = window.innerHeight <= SHORT_SCREEN_THRESHOLD;
          const header = document.getElementById("main-header");
          const headerHeight = header.offsetHeight;
          const isHeaderSticky = header.classList.contains("sticky");

          mainContent.classList.toggle("xl:pr-1/5", isEditMode && isDesktop);

          if (isDesktop) {
            editPane.classList.toggle("hidden", !isEditMode);
            editModalMobile.classList.add("hidden");
            if (isEditMode) {
              websiteContent.classList.add("xl:w-4/5");
              editPane.classList.add("xl:w-1/5");

              editPane.style.top = "0";
              editPane.style.height = "100vh";
              editPane.style.paddingTop = "0";

              // Always scroll the header out of view when entering edit mode
              if (!isHeaderSticky) {
                scrollHeaderOutOfView();
              }
            } else {
              websiteContent.classList.remove("xl:w-4/5");
              editPane.classList.remove("xl:w-1/5");
            }
          } else {
            // Mobile layout
            editPane.classList.add("hidden");
            editModalMobile.classList.toggle("hidden", !isEditMode);

            if (isEditMode) {
              if (isShortScreen && !isHeaderSticky) {
                editModalMobile.classList.add("top-0");
                editModalMobile.classList.remove("bottom-0");
                editModalMobile.style.top = "0";
                editModalMobile.style.height = "100%";
                websiteContent.classList.remove("pb-1/3");
              } else {
                editModalMobile.classList.remove("top-0");
                editModalMobile.classList.add("bottom-0");
                editModalMobile.style.top = "auto";
                editModalMobile.style.height = `${window.innerHeight / 3}px`;
                websiteContent.classList.add("pb-1/3");
              }
              // Always scroll the header out of view when entering edit mode
              if (!isHeaderSticky) {
                scrollHeaderOutOfView();
              }
            } else {
              websiteContent.classList.remove("pb-1/3");
            }
          }
        }

        function toggleEditMode(element) {
          if (isEditMode && element !== activeElement) {
            closeEditMode();
          }
          isEditMode = !isEditMode;
          activeElement = isEditMode ? element : null;

          if (isEditMode) {
            const elementIndex =
              Array.from(editableElements).indexOf(element) + 1;
            const infoText = `Editing element ${elementIndex} of ${editableElements.length}`;
            editInfo.textContent = infoText;
            editInfoMobile.textContent = infoText;

            // Only scroll header out of view if the element is behind it
            if (isElementBehindHeader(element)) {
              scrollHeaderOutOfView();
              // Wait for scrolling to complete before centering
              setTimeout(centerActiveElement, 300);
            } else {
              centerActiveElement();
            }

            handleEditModeLayout();
          } else {
            editInfo.textContent = "";
            editInfoMobile.textContent = "";
            handleEditModeLayout();
          }
        }

        function setViewport(viewport) {
          currentViewport = viewport;
          websiteContent.classList.remove(
            "w-full",
            "max-w-[800px]",
            "min-w-[600px]",
            "min-w-[1024px]",
            "max-w-[1367px]",
            "min-w-[1500px]",
            "max-w-[1920px]"
          );

          if (viewport === "auto") {
            websiteContent.classList.add("w-full", "max-w-[1920px]");
          } else if (viewport === "xs") {
            websiteContent.classList.add("min-w-[600px]", "max-w-[800px]");
          } else if (viewport === "md") {
            websiteContent.classList.add("min-w-[1024px]", "max-w-[1366px]");
          } else if (viewport === "xl") {
            websiteContent.classList.add("min-w-[1500px]", "max-w-[1920px]");
          }

          viewportButtons.forEach(button => {
            button.classList.toggle(
              "bg-blue-500",
              button.dataset.viewport === viewport
            );
            button.classList.toggle(
              "text-white",
              button.dataset.viewport === viewport
            );
            button.classList.toggle(
              "bg-gray-200",
              button.dataset.viewport !== viewport
            );
          });

          handleEditModeLayout();
        }

        function isElementBehindHeader(element) {
          const header = document.getElementById("main-header");
          const headerBottom = header.getBoundingClientRect().bottom;
          const elementTop = element.getBoundingClientRect().top;
          return elementTop < headerBottom;
        }

        function scrollHeaderOutOfView() {
          const header = document.getElementById("main-header");
          const headerHeight = header.offsetHeight;
          window.scrollTo({
            top: window.pageYOffset + headerHeight,
            behavior: "smooth",
          });
        }

        function centerActiveElement() {
          if (!activeElement) return;

          const isDesktop = window.innerWidth >= BREAKPOINTS.xl;
          const header = document.getElementById("main-header");
          const headerHeight = header.offsetHeight;
          const isHeaderSticky = header.classList.contains("sticky");
          const rect = activeElement.getBoundingClientRect();
          const scrollTop =
            window.pageYOffset || document.documentElement.scrollTop;

          let targetScrollTop;
          if (isDesktop) {
            const editPaneHeight =
              window.innerHeight - (isHeaderSticky ? headerHeight : 0);
            targetScrollTop =
              scrollTop + rect.top - (editPaneHeight - rect.height) / 2;
          } else {
            const editModalHeight = window.innerHeight / 3;
            const availableHeight =
              window.innerHeight -
              (isHeaderSticky ? headerHeight : 0) -
              editModalHeight;
            targetScrollTop =
              scrollTop + rect.top - (availableHeight - rect.height) / 2;
          }

          // Only adjust for header if the element is behind it
          if (isElementBehindHeader(activeElement)) {
            targetScrollTop = Math.max(
              targetScrollTop,
              scrollTop + headerHeight
            );
          }

          if (targetScrollTop !== scrollTop) {
            window.scrollTo({
              top: targetScrollTop,
              behavior: "smooth",
            });
          }
        }

        function handleHeaderBehavior() {
          const header = document.getElementById("main-header");
          const viewportHeight = window.innerHeight;

          if (viewportHeight > 1200) {
            header.classList.add("sticky", "top-0");
          } else {
            header.classList.remove("sticky", "top-0");
          }

          handleEditModeLayout();
        }

        function checkElementVisibility() {
          if (!isEditMode || !activeElement) return;

          const rect = activeElement.getBoundingClientRect();
          const header = document.getElementById("main-header");
          const headerHeight = header.offsetHeight;
          const isHeaderSticky = header.classList.contains("sticky");
          const editModalHeight =
            window.innerWidth >= BREAKPOINTS.xl ? 0 : window.innerHeight / 3;
          const visibleHeight =
            window.innerHeight -
            (isHeaderSticky ? headerHeight : 0) -
            editModalHeight;

          if (
            rect.top > visibleHeight ||
            rect.bottom < (isHeaderSticky ? headerHeight : 0)
          ) {
            toggleEditMode(activeElement);
          }
        }

        function debounce(func, wait) {
          let timeout;
          return function executedFunction(...args) {
            const later = () => {
              clearTimeout(timeout);
              func(...args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
          };
        }

        function handleResize() {
          handleEditModeLayout();
          if (isEditMode) centerActiveElement();
        }

        // Event Listeners
        viewportButtons.forEach(button => {
          button.addEventListener("click", () =>
            setViewport(button.dataset.viewport)
          );
        });

        editableElements.forEach(element => {
          element.addEventListener("click", () => toggleEditMode(element));
        });

        window.addEventListener(
          "scroll",
          debounce(checkElementVisibility, 100)
        );
        window.addEventListener("resize", debounce(handleResize, 250));

        document.addEventListener("keydown", event => {
          if (event.key === "Escape" && isEditMode) {
            closeEditMode();
          }
        });

        window.addEventListener("resize", debounce(handleHeaderBehavior, 250));

        // Initialize
        setViewport("auto");
        handleHeaderBehavior();
      });
    </script>
  </body>
</html>

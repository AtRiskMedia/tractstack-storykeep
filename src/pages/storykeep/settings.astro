---
import { getContentMap } from "../../api/turso";
import StoryKeep from "@layouts/StoryKeep.astro";
import Header from "@components/Header.astro";
import Footer from "@components/Footer.astro";
import ImpressionWrapper from "@components/ImpressionWrapper";
import EnvironmentSettings from "../../components/storykeep/fields/EnvironmentSettings";
import type {
  ContentMap,
  AuthStatus,
  ImpressionDatum,
  MenuDatum,
} from "../../types";

// user authenticated?
const user = Astro.locals.user as AuthStatus;

// confirm set-up
const hasConcierge = [
  import.meta.env.PUBLIC_CONCIERGE_STYLES_URL,
  import.meta.env.PRIVATE_CONCIERGE_BASE_URL,
  import.meta.env.PUBLIC_IMAGE_URL,
  import.meta.env.PRIVATE_CONCIERGE_SECRET,
  import.meta.env.PRIVATE_AUTH_SECRET,
].every(x => typeof x === "string" && x.length > 0);
const hasTurso = [
  import.meta.env.TURSO_DATABASE_URL,
  import.meta.env.TURSO_AUTH_TOKEN,
].every(x => typeof x === "string" && x.length > 0);
const hasBranding = [
  import.meta.env.PUBLIC_THEME,
  import.meta.env.PUBLIC_FOOTER,
  import.meta.env.PUBLIC_SLOGAN,
  import.meta.env.PUBLIC_SITE_URL,
].every(x => typeof x === "string" && x.length > 0);
const hasContent = [
  import.meta.env.PUBLIC_HOME,
  import.meta.env.PUBLIC_TRACTSTACK,
].every(x => typeof x === "string" && x.length > 0);
if (!hasConcierge || !hasTurso || !hasBranding || !hasContent) {
  return Astro.redirect("/storykeep");
}

// set the canonicalUrl to the actual storyfragment
const baseUrl = new URL(Astro.url.pathname, Astro.site);
const canonicalURL = new URL(`/storykeep/settings`, baseUrl).href;

// menu
const menuPayload = {
  id: `storykeep`,
  title: "Story Keep Menu",
  theme: "default",
  optionsPayload: [
    {
      name: "Dashboard",
      description: "Your Story Keep Dashboard",
      featured: true,
      actionLisp: "(goto (storykeep dashboard))",
    },
    {
      name: "Logout",
      description: "Close this session",
      featured: true,
      actionLisp: "(goto (storykeep logout))",
    },
  ],
} as MenuDatum;
// impression
const impressions = user.isOpenDemo
  ? [
      {
        id: `storykeep`,
        parentId: `storykeep`,
        title: "Would you like your website to be built with Tract Stack?",
        body: "We offer Tract Stack as a service with premium agency support.",
        actionLisp: "",
        buttonText: "Interested!",
        actionsLisp: "(goto (url https://tractstack.com/#pricing))",
      },
    ]
  : ([] as ImpressionDatum[]);

const contentMap: ContentMap[] = await getContentMap();
---

<StoryKeep title="Advanced Settings" canonicalURL={canonicalURL}>
  <Header
    title="Advanced Settings"
    menu={menuPayload}
    slug="storykeep-settings"
    isContext={false}
    impressions={impressions}
    user={user}
    isStoryKeep={true}
  />
  <main id="main-content" class="min-h-screen">
    <div class="px-1.5 pt-1.5 pb-0 pr-0 pl-1.5 py-1.5">
      <div class="py-1.5 bg-white px-3.5">
        <EnvironmentSettings contentMap={contentMap} client:load />
      </div>
    </div>
  </main>
  {
    impressions?.length ? (
      <ImpressionWrapper
        slug={`storykeep`}
        isContext={false}
        payload={impressions}
        client:idle
      />
    ) : null
  }
  <Footer
    menu={menuPayload}
    backToTop={true}
    slug={`storykeep-settings`}
    isContext={false}
  />
</StoryKeep>

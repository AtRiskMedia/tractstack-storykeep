---
import { Svg } from "@components/widgets/Svg";
import { classNames } from "../../utils/helpers";
import { svgImageMask } from "../../utils/compositor/svgImageMask";
import type { BgPaneDatum } from "../../types";

interface Props {
  payload: BgPaneDatum;
}

interface BreakOptionsDatum {
  id: string;
  artpackMode: string;
  styles: { fill: string };
  shapeName: string;
}
interface MaskOptionsDatum {
  id: string;
  artpackMode: string;
  classNamesParent: string;
  styles: {
    backgroundImage: string;
    backgroundSize: string;
    WebkitMaskImage: string;
    maskImage: string;
    maskRepeat: string;
    WebkitMaskSize: string;
    maskSize: string;
  };
}
interface ShapeOptionsDatum {
  id: string;
  shapeName: string;
  classNamesParent: string;
  artpackMode: null;
}

const { payload } = Astro.props;

const optionsPayload = payload.optionsPayload;
const hasArtpack = optionsPayload?.artpack;
const hasArtpackAll = hasArtpack?.all;
const baseClasses: { [key: string]: string } = {
  mobile: `md:hidden`,
  tablet: `hidden md:block xl:hidden`,
  desktop: `hidden xl:block`,
};

// prepare for each breakpoint
const options = [`mobile`, `tablet`, `desktop`].map((viewportKey: string) => {
  if (payload.hiddenViewports.includes(viewportKey)) return null;

  // check for artpack payload
  const hasArtpackViewport =
    hasArtpack &&
    typeof hasArtpack[viewportKey] !== `undefined` &&
    hasArtpack[viewportKey];
  const artpack = (hasArtpack && hasArtpackAll) || hasArtpackViewport;
  const artpackMode = artpack ? artpack.mode : null;
  const artpackFiletype = artpack ? artpack.filetype : null;
  const artpackCollection = artpack ? artpack.collection : null;
  const viewportPrefix =
    viewportKey === `desktop` || viewportKey === `tablet` ? `1920` : `800`;
  const filenamePrefix =
    artpackCollection !== `custom` ? `${artpackCollection}-` : ``;
  const artpackImage = artpack ? artpack.image : null;

  // check for shape mask
  const thisShapeSelector =
    viewportKey === `desktop`
      ? payload.shapeDesktop
      : viewportKey === `tablet`
        ? payload.shapeTablet
        : viewportKey === `mobile`
          ? payload.shapeMobile
          : payload.shape;
  const shapeName = thisShapeSelector !== `none` ? thisShapeSelector : null;
  const thisId = `${viewportKey}-${payload.id}-pane`;

  // check for tailwind classes
  const hasClassNamesParent = optionsPayload?.classNamesParent;
  const classNamesParent =
    hasClassNamesParent &&
    typeof optionsPayload?.classNamesParent?.all !== `undefined`
      ? optionsPayload.classNamesParent.all
      : typeof optionsPayload?.classNamesParent !== `undefined` &&
          typeof optionsPayload?.classNamesParent[viewportKey] !== `undefined`
        ? optionsPayload.classNamesParent[viewportKey]
        : ``;

  // based on artpack mode
  // break = use artpack, show svg (from shapes), no mask
  // mask = use artpack, show image via css url, apply mask via css
  // else just show shape
  //
  switch (artpackMode) {
    case `break`: {
      return {
        id: `${viewportKey}-${payload.id}`,
        artpackMode,
        styles: { fill: (artpack && artpack?.svgFill) || `none` },
        shapeName: `${artpackCollection}${artpackImage}`,
      };
    }
    case `mask`: {
      const maskSvg = shapeName && svgImageMask(shapeName, thisId, viewportKey);
      if (!maskSvg) return null;
      return {
        id: `${viewportKey}-${payload.id}`,
        artpackMode,
        classNamesParent,
        styles: {
          backgroundImage: `url(/${artpackCollection}-artpack/${viewportPrefix}/${filenamePrefix}${artpackImage}.${artpackFiletype})`,
          backgroundSize: artpack ? artpack.objectFit : `cover`,
          WebkitMaskImage: maskSvg.mask,
          maskImage: maskSvg.mask,
          maskRepeat: `no-repeat`,
          WebkitMaskSize: `100% AUTO`,
          maskSize: `100% AUTO`,
        },
      };
    }

    default:
      return {
        id: `${viewportKey}-${payload.id}`,
        shapeName,
        classNamesParent,
      };
  }
});

const viewportLookup = [`mobile`, `tablet`, `desktop`];
---

{
  [0, 1, 2].map((i: number) => {
    if (options.at(i) && !options.at(i)?.artpackMode) {
      const thisOptions = options.at(i) as unknown as ShapeOptionsDatum;
      return (
        <div
          class={classNames(
            baseClasses[viewportLookup[i]],
            thisOptions.classNamesParent
          )}
        >
          <Svg
            shapeName={thisOptions.shapeName}
            viewportKey={viewportLookup[i]}
            id={thisOptions.id}
          />
        </div>
      );
    } else if (options.at(i) && options.at(i)?.artpackMode === `break`) {
      const thisOptions = options.at(i) as unknown as BreakOptionsDatum;
      return (
        <div class={baseClasses[viewportLookup[i]]} style={thisOptions.styles}>
          <Svg
            shapeName={thisOptions.shapeName}
            viewportKey={viewportLookup[i]}
            id={thisOptions.id}
          />
        </div>
      );
    } else if (options.at(i) && options.at(i)?.artpackMode === `mask`) {
      const thisOptions = options.at(i) as unknown as MaskOptionsDatum;
      return (
        <div
          class={classNames(
            `w-full h-full`,
            baseClasses[viewportLookup[i]],
            thisOptions.classNamesParent
          )}
          style={thisOptions.styles}
        />
      );
    }
  })
}

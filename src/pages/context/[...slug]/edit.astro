---
import {
  getContentMap,
  getAllFileDatum,
  getContextPaneBySlug,
} from "../../../api/turso";
import { cleanTursoFileDatum } from "../../../utils/compositor/tursoFileDatum";
import StoryKeep from "@layouts/StoryKeep.astro";
import { EditModal } from "@components/storykeep/EditModal";
import { ContextPane } from "@components/storykeep/ContextPane";
import { StoryKeepContextStore } from "@components/storykeep/StoryKeepContextStore";
import { StoryKeepHeader } from "@components/storykeep/StoryKeepHeader";
import type { AuthStatus, ContentMap } from "../../../types";

const user = Astro.locals.user as AuthStatus;

const { slug } = Astro.params;

if (!slug) return Astro.redirect("/404");

// confirm set-up
const hasConcierge = [
  import.meta.env.PUBLIC_CONCIERGE_STYLES_URL,
  import.meta.env.PRIVATE_CONCIERGE_BASE_URL,
  import.meta.env.PUBLIC_IMAGE_URL,
  import.meta.env.PRIVATE_CONCIERGE_SECRET,
  import.meta.env.PRIVATE_AUTH_SECRET,
].every(x => typeof x === "string" && x.length > 0);
const hasTurso = [
  import.meta.env.TURSO_DATABASE_URL,
  import.meta.env.TURSO_AUTH_TOKEN,
].every(x => typeof x === "string" && x.length > 0);
const hasBranding = [
  import.meta.env.PUBLIC_THEME,
  import.meta.env.PUBLIC_FOOTER,
  import.meta.env.PUBLIC_SLOGAN,
  import.meta.env.PUBLIC_SITE_URL,
].every(x => typeof x === "string" && x.length > 0);
const hasContent = [
  import.meta.env.PUBLIC_HOME,
  import.meta.env.PUBLIC_TRACTSTACK,
].every(x => typeof x === "string" && x.length > 0);
if (!hasConcierge || !hasTurso || !hasBranding || !hasContent) {
  return Astro.redirect("/storykeep");
}

const baseUrl = new URL(Astro.url.pathname, Astro.site);
const canonicalURL = new URL(`/context/${slug}`, baseUrl).href;

const filesRaw = await getAllFileDatum();
const files = cleanTursoFileDatum(filesRaw);

const contextPane = await getContextPaneBySlug(slug);
if ((!contextPane || !contextPane.panePayload) && slug !== `create`)
  return Astro.redirect("/404");

const contentMap: ContentMap[] = await getContentMap();
---

<StoryKeep
  title={contextPane?.title}
  pubDatetime={contextPane?.created}
  modDatetime={contextPane?.changed}
  canonicalURL={canonicalURL}
>
  <div
    id="storykeep-content"
    class="m-0 p-0 flex flex-col bg-myblack w-full"
    style="background-image:repeating-linear-gradient( 45deg, transparent, transparent 10px, rgba(0,0,0, 0.1) 10px, rgba(0,0,0, 0.1) 20px )"
    ,
  >
    {
      contextPane && (
        <StoryKeepContextStore client:only="react" pane={contextPane} />
      )
    }
    <header
      class="z-[8999] sticky top-0 z-10 bg-mywhite flex justify-between items-center w-full"
      id="main-header"
    >
      <StoryKeepHeader
        client:only="react"
        id={slug === "create"
          ? `create`
          : contextPane?.id
            ? contextPane.id
            : `error`}
        slug={slug}
        isContext={true}
        contentMap={contentMap}
        user={user}
        originalData={contextPane}
      />
    </header>

    <div id="storykeep" class="bg-white overflow-auto mx-auto w-full">
      <main id="website-content" class="overflow-auto w-full">
        <ContextPane
          id={slug === "create"
            ? null
            : contextPane?.id
              ? contextPane.id
              : `error`}
          slug={slug}
          client:only="react"
        />
        <div
          class="h-96 m-0 p-0 flex flex-col bg-mydarkgrey w-full"
          style="background-image:repeating-linear-gradient( 45deg, transparent, transparent 10px, rgba(0,0,0, 0.1) 10px, rgba(0,0,0, 0.1) 20px )"
        >
        </div>
      </main>

      <EditModal
        client:only="react"
        id={slug === "create"
          ? `create`
          : contextPane?.id
            ? contextPane.id
            : `error`}
        files={files}
        contentMap={contentMap}
      />
    </div>
  </div>
</StoryKeep>

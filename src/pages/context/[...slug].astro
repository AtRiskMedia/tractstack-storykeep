---
import ContextPaneWrapper from "@components/ContextPaneWrapper.astro";
import ImpressionWrapper from "@components/ImpressionWrapper";
import Layout from "@layouts/Layout.astro";
import Header from "@components/Header.astro";
import Footer from "@components/Footer.astro";
import { getContextPaneBySlug } from "../../api/turso";
import type { StylesVersion, Current, AuthStatus } from "../../types";

// user authenticated?
const user = Astro.locals.user as AuthStatus;

// confirm set-up
const hasConcierge = [
  import.meta.env.PUBLIC_CONCIERGE_STYLES_URL,
  import.meta.env.PRIVATE_CONCIERGE_BASE_URL,
  import.meta.env.PUBLIC_IMAGE_URL,
  import.meta.env.PRIVATE_CONCIERGE_SECRET,
  import.meta.env.PRIVATE_AUTH_SECRET,
].every(x => typeof x === "string" && x.length > 0);
const hasTurso = [
  import.meta.env.TURSO_DATABASE_URL,
  import.meta.env.TURSO_AUTH_TOKEN,
].every(x => typeof x === "string" && x.length > 0);
const hasBranding = [
  import.meta.env.PUBLIC_THEME,
  import.meta.env.PUBLIC_FOOTER,
  import.meta.env.PUBLIC_SLOGAN,
  import.meta.env.PUBLIC_SITE_URL,
].every(x => typeof x === "string" && x.length > 0);
const hasContent = [
  import.meta.env.PUBLIC_HOME,
  import.meta.env.PUBLIC_TRACTSTACK,
].every(x => typeof x === "string" && x.length > 0);
if (!hasConcierge || !hasTurso || !hasBranding || !hasContent) {
  return Astro.redirect("/storykeep");
}

const stylesVerUrl = `${import.meta.env.PUBLIC_CONCIERGE_STYLES_URL}/v.json`;
const requestStyles = await fetch(stylesVerUrl);
const stylesVer: StylesVersion =
  requestStyles.status === 404 ? 0 : await requestStyles.json();
const stylesUrl = `${import.meta.env.PUBLIC_CONCIERGE_STYLES_URL}/frontend.css?v=${stylesVer?.v || 0}`;

const { slug } = Astro.params;
if (!slug) return Astro.redirect("/404");
const pane = await getContextPaneBySlug(slug);
if (!pane || !pane.panePayload) return Astro.redirect("/404");

// id for this context pane
const current: Current = {
  id: pane.id,
  slug: pane.slug,
  title: pane.title,
};
---

<Layout
  title={pane.title}
  pubDatetime={pane.created}
  modDatetime={pane.changed}
  stylesUrl={stylesUrl}
>
  <Header
    title={pane.title}
    slug={pane.slug}
    isContext={true}
    isEditable={true}
    impressions={pane.impressions}
    user={user}
  />
  <main id="main-content" class="min-h-screen">
    <ContextPaneWrapper
      pane={pane.panePayload}
      resources={pane.resourcesPayload}
      codeHookOptions={pane.codeHookOptions}
      current={current}
    />
  </main>
  {
    pane.impressions?.length ? (
      <ImpressionWrapper
        payload={pane.impressions}
        slug={pane.slug}
        isContext={true}
        client:load
      />
    ) : null
  }
  <Footer created={pane.created} slug={pane.slug} isContext={true} />
</Layout>

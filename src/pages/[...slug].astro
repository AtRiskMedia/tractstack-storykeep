---
import StoryFragmentWrapper from "@components/StoryFragmentWrapper.astro";
import ImpressionWrapper from "@components/ImpressionWrapper";
import Layout from "@layouts/Layout.astro";
import Header from "@components/Header.astro";
import HeaderWidget from "../custom/HeaderWidget.astro";
import Footer from "@components/Footer.astro";
import { getStoryFragmentBySlug } from "../api/turso";
import { ENABLE_HEADER_WIDGET } from "../constants";
import type { AuthStatus, Current, StylesVersion } from "../types";

// user authenticated?
const user = Astro.locals.user as AuthStatus;

// confirm set-up
const hasConcierge = [
  import.meta.env.PUBLIC_CONCIERGE_STYLES_URL,
  import.meta.env.PRIVATE_CONCIERGE_BASE_URL,
  import.meta.env.PUBLIC_IMAGE_URL,
  import.meta.env.PRIVATE_CONCIERGE_SECRET,
  import.meta.env.PRIVATE_AUTH_SECRET,
].every(x => typeof x === "string" && x.length > 0);
const hasTurso = [
  import.meta.env.TURSO_DATABASE_URL,
  import.meta.env.TURSO_AUTH_TOKEN,
].every(x => typeof x === "string" && x.length > 0);
const hasBranding = [
  import.meta.env.PUBLIC_THEME,
  import.meta.env.PUBLIC_FOOTER,
  import.meta.env.PUBLIC_SLOGAN,
  import.meta.env.PUBLIC_SITE_URL,
].every(x => typeof x === "string" && x.length > 0);
const hasContent = [
  import.meta.env.PUBLIC_HOME,
  import.meta.env.PUBLIC_TRACTSTACK,
].every(x => typeof x === "string" && x.length > 0);
if (!hasConcierge || !hasTurso || !hasBranding || !hasContent) {
  return Astro.redirect("/storykeep");
}

// get styles offset
const stylesVerUrl = `${import.meta.env.PUBLIC_CONCIERGE_STYLES_URL}/v.json`;
const requestStyles = await fetch(stylesVerUrl);
const stylesVer: StylesVersion =
  requestStyles.status === 404 ? 0 : await requestStyles.json();
const stylesUrl = `${import.meta.env.PUBLIC_CONCIERGE_STYLES_URL}/frontend.css?v=${stylesVer?.v || 0}`;

// which storyfragment?
const { slug } = Astro.params;
const lookup = slug || import.meta.env.PUBLIC_HOME;
if (slug === import.meta.env.PUBLIC_HOME) return Astro.redirect("/");
if (!lookup) return Astro.redirect("/404");

// get storyfragment datum
const storyfragment = await getStoryFragmentBySlug(lookup);
if (!storyfragment) {
  return Astro.redirect("/404");
}

// id for this storyfragment
const current: Current = {
  id: storyfragment.id,
  slug: storyfragment.slug,
  title: storyfragment.title,
  parentId: storyfragment.tractStackId,
  parentSlug: storyfragment.tractStackSlug,
  parentTitle: storyfragment.tractStackTitle,
};
---

<Layout
  title={storyfragment.title}
  pubDatetime={storyfragment.created}
  modDatetime={storyfragment.changed}
  ogImage={storyfragment.socialImagePath}
  stylesUrl={stylesUrl}
>
  {
    ENABLE_HEADER_WIDGET ? (
      <HeaderWidget
        slug={lookup}
        resources={storyfragment.resourcesPayload.headerWidget}
      />
    ) : null
  }
  <Header
    title={storyfragment.title}
    menu={storyfragment.menuPayload}
    slug={lookup}
    isContext={false}
    isEditable={true}
    impressions={storyfragment.impressions}
    user={user}
  />
  <main id="main-content" class="min-h-screen">
    <StoryFragmentWrapper
      tailwindBgColour={storyfragment.tailwindBgColour}
      panesPayload={storyfragment.panesPayload}
      current={current}
      resourcesPayload={storyfragment.resourcesPayload}
    />
  </main>
  {
    storyfragment.impressions?.length ? (
      <ImpressionWrapper
        slug={storyfragment.slug}
        isContext={true}
        payload={storyfragment.impressions}
        client:idle
      />
    ) : null
  }
  <Footer
    created={storyfragment.created}
    menu={storyfragment.menuPayload}
    backToTop={true}
    slug={lookup}
    isContext={false}
  />
</Layout>

---
import PaneFromAst from "./PaneFromAst.astro";
import { SvgInsideLeft } from "../widgets/SvgInsideLeft";
import { SvgInsideRight } from "../widgets/SvgInsideRight";
import { classNames } from "../../utils/helpers";
import type { FileNode, MarkdownDatum, MarkdownPaneDatum } from "../../types";

interface Props {
  payload: MarkdownPaneDatum;
  markdown: MarkdownDatum;
  files: FileNode[];
  paneHeight: [number, number, number];
  paneId: string;
  slug: string;
}

const { payload, markdown, files, paneHeight, paneId, slug } = Astro.props;

const optionsPayload = payload.optionsPayload;
const baseClasses: { [key: string]: string } = {
  mobile: `md:hidden`,
  tablet: `hidden md:grid xl:hidden`,
  desktop: `hidden xl:grid`,
};
const paneFragmentStyle = {
  gridArea: "1/1/1/1",
};

const payloads = [`mobile`, `tablet`, `desktop`].map((viewportKey: string) => {
  if (payload.hiddenViewports.includes(viewportKey)) return null;

  const shapeName =
    viewportKey === `desktop`
      ? payload.textShapeOutsideDesktop
      : viewportKey === `tablet`
        ? payload.textShapeOutsideTablet
        : viewportKey === `mobile`
          ? payload.textShapeOutsideMobile
          : payload.textShapeOutside;
  const astPayload = {
    ast: markdown.htmlAst.children,
    buttonData: optionsPayload?.buttons || {},
    imageData: files,
  };
  const injectClassNames = optionsPayload?.classNames?.all || {};
  const classNamesParentRaw = optionsPayload?.classNamesParent
    ? optionsPayload.classNamesParent?.all
    : ``;
  const classNamesParent =
    typeof classNamesParentRaw === `string`
      ? [classNamesParentRaw]
      : classNamesParentRaw;
  return {
    shapeName,
    astPayload,
    injectClassNames,
    classNamesParent,
    viewportKey,
  };
});
---

{
  payloads.map(thisPayload =>
    thisPayload?.classNamesParent.reverse().reduce(
      (content, cssClass) => {
        return <div class={cssClass}>{content}</div>;
      },
      <div
        class={classNames(
          thisPayload?.classNamesParent.join(` `) || ``,
          (thisPayload?.viewportKey && baseClasses[thisPayload?.viewportKey]) ||
            ``,
          `h-fit-contents`
        )}
      >
        <div
          class="relative w-full h-full justify-self-start"
          style={paneFragmentStyle}
        >
          <SvgInsideLeft
            client:visible
            shapeName={thisPayload?.shapeName || ``}
            viewportKey={thisPayload?.viewportKey}
            id={`markdown-${paneId}`}
            paneHeight={
              paneHeight[
                thisPayload?.viewportKey === `desktop`
                  ? 2
                  : thisPayload?.viewportKey === `tablet`
                    ? 1
                    : 0
              ]
            }
          />
          <SvgInsideRight
            client:visible
            shapeName={thisPayload?.shapeName || ``}
            viewportKey={thisPayload?.viewportKey}
            id={`markdown-${paneId}`}
            paneHeight={
              paneHeight[
                thisPayload?.viewportKey === `desktop`
                  ? 2
                  : thisPayload?.viewportKey === `tablet`
                    ? 1
                    : 0
              ]
            }
          />
          {thisPayload?.astPayload?.ast
            .filter(
              /* eslint-disable @typescript-eslint/no-explicit-any */
              (e: any) => !(e?.type === `text` && e?.value === `\n`)
            )
            /* eslint-disable @typescript-eslint/no-explicit-any */
            .map((thisAstPayload: any, idx: number) => (
              <PaneFromAst
                payload={{
                  ...thisPayload?.astPayload,
                  ast: [thisAstPayload],
                }}
                thisClassNames={thisPayload?.injectClassNames || ``}
                memory={{}}
                paneId={paneId}
                slug={slug}
                idx={0}
                outerIdx={idx}
              />
            ))}
        </div>
      </div>
    )
  )
}

---
// Any Astro-specific imports or frontmatter can go here
---

<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>StoryKeep</title>
  </head>
  <body class="m-0 p-0 flex flex-col bg-slate-50">
    <header
      class="z-10 bg-white shadow-md p-4 flex justify-between items-center"
      id="main-header"
    >
      <h1 class="text-2xl font-bold">StoryKeep</h1>
      <div class="flex space-x-2">
        <button
          class="viewport-button px-4 py-2 bg-gray-200 border border-gray-300 rounded-md hover:bg-gray-300 transition-colors"
          data-viewport="auto">Auto</button
        >
        <button
          class="viewport-button px-4 py-2 bg-gray-200 border border-gray-300 rounded-md hover:bg-gray-300 transition-colors"
          data-viewport="xs">XS</button
        >
        <button
          class="viewport-button px-4 py-2 bg-gray-200 border border-gray-300 rounded-md hover:bg-gray-300 transition-colors"
          data-viewport="md">MD</button
        >
        <button
          class="viewport-button px-4 py-2 bg-gray-200 border border-gray-300 rounded-md hover:bg-gray-300 transition-colors"
          data-viewport="xl">XL</button
        >
      </div>
    </header>

    <div class="flex-1 flex">
      <main class="website-content flex-1 overflow-y-auto p-4 bg-white">
        <h2 class="text-xl font-semibold mb-4">Website Content</h2>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <div
          class="editable-element mt-4 p-2 border border-gray-300 rounded-md cursor-pointer"
          data-element-id="1"
        >
          <p>This is an editable element. Click to edit.</p>
        </div>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <div
          class="editable-element mt-4 p-2 border border-gray-300 rounded-md cursor-pointer"
          data-element-id="2"
        >
          <p>This is an editable element. Click to edit.</p>
        </div>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <div
          class="editable-element mt-4 p-2 border border-gray-300 rounded-md cursor-pointer"
          data-element-id="3"
        >
          <p>This is an editable element. Click to edit.</p>
        </div>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
        <p>lorem ipsum</p>
      </main>

      <aside
        class="edit-pane hidden w-0 transition-all duration-300 bg-yellow-300 border-l border-gray-300 p-4 overflow-y-auto fixed right-0 top-0 bottom-0"
      >
        <h3 class="text-lg font-semibold mb-2">Edit Mode</h3>
        <p id="edit-info"></p>
      </aside>
    </div>

    <div
      class="edit-modal-mobile hidden fixed bg-yellow-300 shadow-md z-20 transition-all duration-300 flex flex-col w-full"
    >
      <h3 class="text-lg font-semibold mb-2">Edit Mode (Mobile/Tablet)</h3>
      <div class="overflow-y-auto p-4 flex-grow">
        <p id="edit-info-mobile"></p>
      </div>
    </div>

    <script>
      document.addEventListener("DOMContentLoaded", () => {
        const mainContent = document.querySelector(".flex-1.flex");
        const websiteContent = document.querySelector(".website-content");
        const editPane = document.querySelector(".edit-pane");
        const editModalMobile = document.querySelector(".edit-modal-mobile");
        const viewportButtons = document.querySelectorAll(".viewport-button");
        const editableElements = document.querySelectorAll(".editable-element");
        const editInfo = document.getElementById("edit-info");
        const editInfoMobile = document.getElementById("edit-info-mobile");
        const header = document.getElementById("main-header");

        const BREAKPOINTS = {
          xs: 600,
          md: 800,
          xl: 1367,
        };
        const SHORT_SCREEN_THRESHOLD = 600;
        const STICKY_HEADER_THRESHOLD = 1200;

        let currentViewport = "auto";
        let isEditMode = false;
        let activeElement = null;

        function handleHeaderBehavior() {
          const viewportHeight = window.innerHeight;
          if (viewportHeight > STICKY_HEADER_THRESHOLD) {
            header.classList.add("sticky", "top-0");
          } else {
            header.classList.remove("sticky", "top-0");
          }
        }

        function handleEditModeLayout() {
          const isDesktop = window.innerWidth >= BREAKPOINTS.xl;
          const isShortScreen = window.innerHeight <= SHORT_SCREEN_THRESHOLD;
          const headerHeight = header.offsetHeight;
          const isHeaderSticky = header.classList.contains("sticky");

          mainContent.classList.toggle("xl:pr-1/5", isEditMode && isDesktop);

          if (isDesktop) {
            editPane.classList.toggle("hidden", !isEditMode);
            editModalMobile.classList.add("hidden");
            if (isEditMode) {
              websiteContent.classList.add("xl:w-4/5");
              editPane.classList.add("xl:w-1/5");
              editPane.style.top = isHeaderSticky ? `${headerHeight}px` : "0";
              editPane.style.height = isHeaderSticky
                ? `calc(100vh - ${headerHeight}px)`
                : "100vh";
            } else {
              websiteContent.classList.remove("xl:w-4/5");
              editPane.classList.remove("xl:w-1/5");
            }
          } else {
            editPane.classList.add("hidden");
            editModalMobile.classList.toggle("hidden", !isEditMode);

            if (isEditMode) {
              if (isShortScreen) {
                editModalMobile.style.top = "0";
                editModalMobile.style.bottom = "0";
                editModalMobile.style.height = "100%";
                editModalMobile.style.zIndex = "1000";
                websiteContent.classList.add("hidden");
              } else {
                editModalMobile.style.top = "auto";
                editModalMobile.style.bottom = "0";
                editModalMobile.style.height = `${window.innerHeight / 3}px`;
                editModalMobile.style.zIndex = "10";
                websiteContent.classList.remove("hidden");
                websiteContent.style.paddingBottom = `${window.innerHeight / 3}px`;
              }
              if (!isHeaderSticky) {
                scrollHeaderOutOfView();
              }
              if (!isShortScreen) {
                scrollElementIntoView();
              }
            } else {
              websiteContent.style.paddingBottom = "0";
              websiteContent.classList.remove("hidden");
            }
          }
        }

        function setViewport(viewport) {
          currentViewport = viewport;
          websiteContent.className =
            "website-content flex-1 overflow-y-auto p-4 bg-white";

          if (viewport === "auto") {
            websiteContent.classList.add("w-full", "max-w-[1920px]");
          } else if (viewport === "xs") {
            websiteContent.classList.add("min-w-[600px]", "max-w-[800px]");
          } else if (viewport === "md") {
            websiteContent.classList.add("min-w-[1024px]", "max-w-[1366px]");
          } else if (viewport === "xl") {
            websiteContent.classList.add("min-w-[1500px]", "max-w-[1920px]");
          }

          viewportButtons.forEach(button => {
            button.classList.toggle(
              "bg-blue-500",
              button.dataset.viewport === viewport
            );
            button.classList.toggle(
              "text-white",
              button.dataset.viewport === viewport
            );
            button.classList.toggle(
              "bg-gray-200",
              button.dataset.viewport !== viewport
            );
          });

          handleEditModeLayout();
        }

        function toggleEditMode(element) {
          if (isEditMode && element === activeElement) {
            isEditMode = false;
            activeElement = null;
          } else if (isEditMode) activeElement = element;
          else {
            isEditMode = true;
            activeElement = element;
          }

          if (isEditMode) {
            const elementIndex =
              Array.from(editableElements).indexOf(element) + 1;
            const infoText = `Editing element ${elementIndex} of ${editableElements.length}`;
            editInfo.textContent = infoText;
            editInfoMobile.textContent = infoText;
            if (!header.classList.contains("sticky")) {
              scrollHeaderOutOfView();
            }
          } else {
            editInfo.textContent = "";
            editInfoMobile.textContent = "";
          }

          handleEditModeLayout();
        }

        function scrollElementIntoView() {
          if (!activeElement) return;

          const isDesktop = window.innerWidth >= BREAKPOINTS.xl;
          if (isDesktop) return;

          const elementRect = activeElement.getBoundingClientRect();
          const editModalHeight = window.innerHeight / 3;
          const viewportHeight = window.innerHeight;
          const scrollY = window.scrollY;

          if (elementRect.bottom > viewportHeight - editModalHeight) {
            const targetScroll =
              scrollY +
              elementRect.bottom -
              (viewportHeight - editModalHeight) +
              20; // 20px padding
            window.scrollTo({
              top: targetScroll,
              behavior: "smooth",
            });
          }
        }

        function scrollHeaderOutOfView() {
          const headerHeight = header.offsetHeight;
          const currentScrollTop =
            window.pageYOffset || document.documentElement.scrollTop;

          window.scrollTo({
            top: Math.max(currentScrollTop, headerHeight),
            behavior: "smooth",
          });
        }

        function handleResize() {
          handleHeaderBehavior();
          handleEditModeLayout();
          if (!isEditMode) {
            websiteContent.style.paddingBottom = "0";
          }
        }

        // Event Listeners
        viewportButtons.forEach(button => {
          button.addEventListener("click", () =>
            setViewport(button.dataset.viewport)
          );
        });

        editableElements.forEach(element => {
          element.addEventListener("click", () => toggleEditMode(element));
        });

        window.addEventListener("resize", handleResize);

        document.addEventListener("keydown", event => {
          if (event.key === "Escape" && isEditMode) {
            toggleEditMode(activeElement);
          }
        });

        // Initialize
        handleHeaderBehavior();
        setViewport("auto");
      });
    </script>
  </body>
</html>
